class EventEmitter {
    
    /**
     * @param {string} eventName
     * @param {Function} callback
     * @return {Object}
     */
    constructor(){
        this.events = {};
    }

    subscribe(eventName, callback) {
        if(!(eventName in this.events)) this.events[eventName] = [];
        this.events[eventName].push(callback);
        return {
            unsubscribe: () => {
                for(let i = 0; i < this.events[eventName].length; i++){
                    if(this.events[eventName][i] === callback){
                        this.events[eventName].splice(i,1);
                        return undefined;
                    }
                }
            }
        };
    }
    
    /**
     * @param {string} eventName
     * @param {Array} args
     * @return {Array}
     */
    emit(eventName, args = []) {
        if (!(eventName in this.events)) return [];  // Handle case where event doesn't exist
        let res = [];
        for(let fn of this.events[eventName])
            res.push(fn(...args));
        return res;
    }
}

/**
 * const emitter = new EventEmitter();
 *
 * // Subscribe to the onClick event with onClickCallback
 * function onClickCallback() { return 99 }
 * const sub = emitter.subscribe('onClick', onClickCallback);
 *
 * emitter.emit('onClick'); // [99]
 * sub.unsubscribe(); // undefined
 * emitter.emit('onClick'); // []
 */
